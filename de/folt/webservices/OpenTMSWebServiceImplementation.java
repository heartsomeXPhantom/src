package de.folt.webservices;

import java.io.FileOutputStream;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Set;
import java.util.Vector;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;

import org.jdom.Element;

import de.folt.constants.OpenTMSConstants;
import de.folt.models.datamodel.DataSource;
import de.folt.models.datamodel.MonoLingualObject;
import de.folt.models.datamodel.MultiLingualObject;
import de.folt.models.datamodel.sql.OpenTMSSQLDataSource;
import de.folt.util.LanguageHandling;
import de.folt.util.OpenTMSException;
import de.folt.util.OpenTMSSupportFunctions;
import flexjson.JSONDeserializer;

/**
 * This class was generated by the JAX-WS RI. JAX-WS RI 2.1.1 in JDK 6 Generated
 * source version: 2.1
 * 
 */
@WebService(name = "OpenTMS", targetNamespace = "http://webservices.folt.de/")
@SOAPBinding(style = SOAPBinding.Style.RPC)
public class OpenTMSWebServiceImplementation implements OpenTMSWebServiceInterface
{

	public static void main(String[] args)
	{
		String url = de.folt.util.OpenTMSProperties.getInstance().getOpenTMSProperty("OpenTMS.WebService.url");
		String urldialogue = de.folt.util.OpenTMSProperties.getInstance().getOpenTMSProperty(
				"OpenTMS.WebService.dialogue");
		boolean bWithDialogue = false;
		try
		{
			bWithDialogue = Boolean.parseBoolean(urldialogue);
			bWithDialogue = false;
		}
		catch (Exception e1)
		{
			e1.printStackTrace();
		}
		OpenTMSWebServiceServer server;
		OpenTMSWebServiceImplementation serverimp;
		if ((url != null) && !url.equals(""))
		{
			server = new OpenTMSWebServiceServer(url);
			serverimp = server.createServer(url, bWithDialogue);
		}
		else
		{
			server = new OpenTMSWebServiceServer();
			serverimp = server.createServer(bWithDialogue);
		}

		if (serverimp != null)
		{
			System.out.println("openTMS WebServices Server started");
			String message = server.getOpenTMSWebServiceConstants().openTMSWebServerURL + "\n"
					+ server.getOpenTMSWebServiceConstants().openTMSWebServerNameSpace + "\n"
					+ server.getOpenTMSWebServiceConstants().openTMSWebServerService + "\n"
					+ server.getOpenTMSWebServiceConstants().openTMSWebServerWSDL;
			System.out.println("Start OpenTMS Server: \n" + message);

			OpenTMSWebServiceConstants consts = new OpenTMSWebServiceConstants();
			if (server != null)
				consts = server.getOpenTMSWebServiceConstants();
			if (url != null)
				consts.setOpenTMSWebServerURL(url);
			OpenTMSWebService service = new OpenTMSWebService(consts);
			OpenTMSWebServiceInterface openTMSService = service.getOpenTMSPort();
			HashMap<String, String> paramHash = new HashMap<String, String>();
			String parameters = "";
			String webServerUpdateCounter = "";
			long lWebServerUpdateCounter = -1;
			try
			{
				paramHash.put("method", "getUpdateCounter");
				parameters = OpenTMSWebServiceResult.jsonSerialise(paramHash);
				String result = openTMSService.synchronize(parameters);
				System.out.println("result: " + result);
				System.out.println(OpenTMSWebServiceResult.deserializeToString(result));
				@SuppressWarnings("rawtypes")
				HashMap rethash = (HashMap) new JSONDeserializer().deserialize(result);
				webServerUpdateCounter = (String) rethash.get("update-counter");

				@SuppressWarnings("unused")
				boolean bFirstSyncDone = false;

				try
				{
					lWebServerUpdateCounter = Long.parseLong(webServerUpdateCounter);
				}
				catch (Exception ex)
				{
					ex.printStackTrace();
				}

				OpenTMSSQLDataSource otemp = new OpenTMSSQLDataSource();
				long lClientUpdateCounter = otemp.currentTimeMillis();
				long lDiffClientWebServerUpdateCounter = lClientUpdateCounter - lWebServerUpdateCounter;

				message = message + "\nWeb Server Update Counter: " + webServerUpdateCounter
						+ "\nClient Update Counter: " + lClientUpdateCounter + "\nDifference: "
						+ lDiffClientWebServerUpdateCounter;
			}
			catch (Exception ex)
			{
				// TODO Auto-generated catch block
				ex.printStackTrace();
			}

			// return a list of available sync data sources
			parameters = "";
			paramHash = new HashMap<String, String>();
			paramHash.put("method", "getSyncDataSources");
			parameters = OpenTMSWebServiceResult.jsonSerialise(paramHash);
			String result = openTMSService.synchronize(parameters);
			System.out.println("result: " + result);
			System.out.println(OpenTMSWebServiceResult.deserializeToString(result));

			@SuppressWarnings("rawtypes")
			HashMap rethash = (HashMap) new JSONDeserializer().deserialize(result);
			String synDataSources = (String) rethash.get("syncDataSources");
			synDataSources = synDataSources.replaceAll("\\;", "\n");

			message = message + "\nSync Data Sources available:\n" + synDataSources;
		}
	}

	private String	logfile	= "";

	private PrintStream	oldErr	= System.err;

	private PrintStream	oldOut	= System.out;

	public OpenTMSWebServiceImplementation()
	{
		super();
		String logfile = "log/webservice." + de.folt.util.OpenTMSSupportFunctions.getCurrentUser() + "."
				+ de.folt.util.OpenTMSSupportFunctions.getDateStringFine() + ".log";

		System.out.println("OpenTMS WebService Log File: " + logfile);
		System.out.flush();

		de.folt.util.OpenTMSLogger.setLogFile(logfile);
		setLogfile(logfile);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * de.folt.webservices.OpenTMSWebServiceInterface#bExistsDataSource(java
	 * .lang.String)
	 */
	@Override
	public boolean bExistsDataSource(String arg0)
	{
		return false;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see de.folt.webservices.OpenTMSWebServiceInterface#getDataSources()
	 */
	@SuppressWarnings("unchecked")
	@Override
	@WebMethod
	@WebResult(partName = "return")
	public String getDataSources(@WebParam(name = "model", partName = "model") String model)
	{
		OpenTMSWebServiceResult obresult = new OpenTMSWebServiceResult();
		try
		{
			String dataModel = "ALL";
			if ((dataModel == null) || dataModel.equalsIgnoreCase(""))
				dataModel = "TMX";
			else if (dataModel.equalsIgnoreCase("TMX"))
				;
			else if (dataModel.equalsIgnoreCase("TBX"))
				;
			else if (dataModel.equalsIgnoreCase("ALL"))
				;
			else
				dataModel = "ALL";
			// System.out.println("dataModel=          \"" + dataModel + "\"");

			// String propFile =
			// OpenTMSProperties.getInstance().getOpenTMSProperty("ArayaPropertiesFile");
			Vector<String> retVec = de.folt.models.datamodel.DataSourceInstance.getOpenTMSDatabases(); // com.araya.OpenTMS.Interface.runReturnDBs(message);
			obresult.setParameters("model", model);
			obresult.setMethod("getDataSources");
			if (retVec == null)
			{
				obresult.setError(de.folt.constants.OpenTMSConstants.OpenTMS_ID_FAILURE,
						"return Vector from com.araya.OpenTMS.Interface.runReturnDBs(message) = null");
			}
			else
			{
				obresult.setError(de.folt.constants.OpenTMSConstants.OpenTMS_ID_SUCCESS, "SUCCESS");
				obresult.put("dataSources", retVec);
			}
			return obresult.jsonSerialise();
		}
		catch (Exception e)
		{
			e.printStackTrace();
			obresult.setError(de.folt.constants.OpenTMSConstants.OpenTMS_ID_FAILURE,
					"return Vector from com.araya.OpenTMS.Interface.runReturnDBs(message) = null");
			obresult.setException(e);
			return obresult.jsonSerialise();
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see de.folt.webservices.OpenTMSWebServiceInterface#getLanguages()
	 */
	@SuppressWarnings("unchecked")
	@Override
	public String getLanguages()
	{
		System.out.println("getLanguages()");
		String slangnames[] = LanguageHandling.getCombinedLanguages();
		Hashtable<String, String> lantable = LanguageHandling.getLanlongtable();
		Hashtable<String, String> lantable1 = LanguageHandling.getLanshorttable();
		OpenTMSWebServiceResult obres = new OpenTMSWebServiceResult();
		obres.setError(de.folt.constants.OpenTMSConstants.OpenTMS_ID_SUCCESS, "Shutdown successfull");
		obres.put("combinedLanguages", slangnames);
		obres.put("longLanguages", lantable);
		obres.put("shortLanguages", lantable1);
		obres.setMethod("getLanguages");
		return obres.jsonSerialise();
	}

	public String getLogfile()
	{
		return logfile;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * de.folt.webservices.OpenTMSWebServiceInterface#getMonolingualObject(java
	 * .lang.String)
	 */
	@SuppressWarnings("unchecked")
	@Override
	@WebMethod
	@WebResult(partName = "return")
	public String getMonolingualObject(@WebParam(name = "id", partName = "id") String id)
	{
		MonoLingualObject mono = new MonoLingualObject("My small segment!", "en");
		mono.addStringLinguisticProperty("OpenTMS", "Folt");
		de.folt.models.datamodel.Test test = new de.folt.models.datamodel.Test();
		mono = test.createRandomMonoLingualObject();
		OpenTMSWebServiceResult obres = new OpenTMSWebServiceResult();
		obres.setError(de.folt.constants.OpenTMSConstants.OpenTMS_ID_SUCCESS, "Success");
		obres.put("MonoLingualObject", mono.mapToTuv());
		obres.setMethod("getMonolingualObject");
		obres.setParameters("id", id);
		return obres.jsonSerialise();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * de.folt.webservices.OpenTMSWebServiceInterface#getMultilingualObject(
	 * java.lang.String)
	 */
	@SuppressWarnings("unchecked")
	@Override
	@WebMethod
	@WebResult(partName = "return")
	public String getMultilingualObject(@WebParam(name = "id", partName = "id") String id)
	{
		MultiLingualObject mono;
		de.folt.models.datamodel.Test test = new de.folt.models.datamodel.Test();
		mono = test.createRandomMultiLingualObject();
		OpenTMSWebServiceResult obres = new OpenTMSWebServiceResult();
		obres.setError(de.folt.constants.OpenTMSConstants.OpenTMS_ID_SUCCESS, "Success");
		obres.put("MultiLingualObject", mono.mapToTransUnit());
		obres.setMethod("getMultilingualObject");
		obres.setParameters("id", id);
		return obres.jsonSerialise();
	}

	private void resetConsole()
	{
		System.setOut(oldOut);
		System.setErr(oldErr);
	}

	private PrintStream setConsoleToFile(String filename)
	{
		try
		{
			oldOut = System.out;
			
			FileOutputStream outStream = new FileOutputStream(filename, true);
			PrintStream printst = new PrintStream(outStream);
			System.setOut(printst);
			oldErr = System.err;
			System.setErr(printst);

			return oldOut;
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
			return System.out;
		}
	}

	public void setLogfile(String logfile)
	{
		this.logfile = logfile;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * de.folt.webservices.OpenTMSWebServiceInterface#shutdown(java.lang.String,
	 * java.lang.String)
	 */
	@Override
	@WebMethod
	@WebResult(partName = "return")
	public String shutdown(@WebParam(name = "user", partName = "user") String user,
			@WebParam(name = "password", partName = "password") String password)
	{
		OpenTMSWebServiceResult obres = new OpenTMSWebServiceResult();
		obres.setError(de.folt.constants.OpenTMSConstants.OpenTMS_ID_SUCCESS, "Shutdown successfull");
		obres.setParameters("user", user, "password", "*********");
		obres.setMethod("shutdown");
		return obres.jsonSerialise();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * de.folt.webservices.OpenTMSWebServiceInterface#synchronize(java.lang.
	 * String)
	 */
	@SuppressWarnings("unchecked")
	@Override
	public String synchronize(@WebParam(name = "parameters", partName = "parameters") String parameters)
	{
		long starttime = System.currentTimeMillis();
		System.out.println("\nsynchronize\n" + parameters);
		HashMap<String, String> paramHash = new HashMap<String, String>();
		try
		{
			paramHash = OpenTMSWebServiceResult.jsonDeserialise(parameters);
			if (paramHash.containsKey("logFile"))
			{
				setLogfile(paramHash.get("logFile"));
				this.setConsoleToFile(this.getLogfile());
			}
			else
			{
				setLogfile("log/synchronize-webservice.log");
				this.setConsoleToFile(this.getLogfile());
			}
		}
		catch (Exception e1)
		{
			e1.printStackTrace();
			OpenTMSWebServiceResult obres = new OpenTMSWebServiceResult();
			obres.setError(de.folt.constants.OpenTMSConstants.OpenTMS_ID_FAILURE, "Failure");
			paramHash.put("result", "error");
			paramHash.put("errorstring", OpenTMSConstants.OpenTMS_JSONDESERIALISE_EXCEPTION_ERROR_MESSAGE);
			paramHash.put("errorno", OpenTMSConstants.OpenTMS_JSONDESERIALISE_EXCEPTION_SERVICE_ERROR + "");
			paramHash.put("exception", OpenTMSSupportFunctions.exceptionToString(e1));
			paramHash.put("dateandtime", OpenTMSSupportFunctions.getDateStringFine());
			paramHash.put("exectime", (System.currentTimeMillis() - starttime) + "");
			paramHash.put("logfile", this.getLogfile());
			obres.putAll(paramHash);
			String result = obres.jsonSerialise();
			System.out.println(result);
			this.resetConsole();
			return result;
		}
		Set<String> en = paramHash.keySet();
		Iterator<String> it = en.iterator();
		while (it.hasNext())
		{
			String key = it.next();
			String value = paramHash.get(key);
			System.out.println("Key: \"" + key + "\"=\"" + value + "\"");
		}

		String result;
		try
		{
			// now decode parameters
			String method = paramHash.get("method");
			SynchronizeService syncService = new SynchronizeService();
			if (method.equals("create"))
			{
				paramHash = syncService.create(paramHash);
			}
			else if (method.equals("delete"))
			{
				paramHash = syncService.delete(paramHash);
			}
			else if (method.equals("upload"))
			{
				paramHash = syncService.upload(paramHash);
			}
			else if (method.equals("download"))
			{
				paramHash = syncService.download(paramHash);
			}
			else if (method.equals("sync"))
			{
				paramHash = syncService.sync(paramHash);
			}
			else if (method.equals("query"))
			{
				paramHash = syncService.query(paramHash);
			}
			else if (method.equals("getUpdateCounter"))
			{
				paramHash = syncService.getUpdateCounter(paramHash);
			}
			else if (method.equals("getSyncDataSources"))
			{
				paramHash = syncService.getSyncDataSources(paramHash);
			}
			else if (method.equals("versionInformation"))
			{
				paramHash = syncService.getVersionInformation(paramHash);
			}
			else if (method.equals("logFile"))
			{
				paramHash.put("logfile", this.getLogfile());
				paramHash = syncService.getLogFile(paramHash);
			}
			else if (method.equals("adduser"))
			{
				paramHash.put("adduser", this.getLogfile());
				paramHash = syncService.addUser(paramHash);
			}
			else if (method.equals("removeuser"))
			{
				paramHash.put("logfile", this.getLogfile());
				paramHash = syncService.removeUser(paramHash);
			}
			else if (method.equals("getcreator"))
			{
				paramHash.put("getcreator", this.getLogfile());
				paramHash = syncService.getCreator(paramHash);
			}
			else if (method.equals("rename"))
			{
				paramHash.put("rename", this.getLogfile());
				paramHash = syncService.rename(paramHash);
			}
			else if (method.equals("listuser"))
			{
				paramHash.put("listuser", this.getLogfile());
				paramHash = syncService.listUser(paramHash);
			}
			else
			{
				paramHash = syncService.error(paramHash);
			}

			OpenTMSWebServiceResult obres = new OpenTMSWebServiceResult();
			paramHash.put("dateandtime", OpenTMSSupportFunctions.getDateStringFine());

			String retValMess = "Success";
			int retVal = de.folt.constants.OpenTMSConstants.OpenTMS_ID_SUCCESS;
			if (paramHash.containsKey("result")) // "result", "error"
			{
				retValMess = paramHash.get("result");
				if (retValMess.equalsIgnoreCase("error"))
					retVal = de.folt.constants.OpenTMSConstants.OpenTMS_ID_FAILURE;
			}
			else
			{
				retVal = de.folt.constants.OpenTMSConstants.OpenTMS_ID_FAILURE;
				retValMess = "error";
			}
			obres.setError(retVal, retValMess);
			paramHash.put("dateandtime", OpenTMSSupportFunctions.getDateStringFine());
			paramHash.put("exectime", (System.currentTimeMillis() - starttime) + "");
			obres.putAll(paramHash);
			result = obres.jsonSerialise();
			System.out.println(result);
		}
		catch (Exception e)
		{
			OpenTMSWebServiceResult obres = new OpenTMSWebServiceResult();
			obres.setError(de.folt.constants.OpenTMSConstants.OpenTMS_ID_FAILURE, "Failure");
			paramHash.put("result", "error");
			paramHash.put("errorstring", OpenTMSConstants.OpenTMS_SYNC_EXCEPTION_ERROR_MESSAGE);
			paramHash.put("errorno", OpenTMSConstants.OpenTMS_SYNC_EXCEPTION_SERVICE_ERROR + "");
			paramHash.put("exception", OpenTMSSupportFunctions.exceptionToString(e));
			paramHash.put("dateandtime", OpenTMSSupportFunctions.getDateStringFine());
			paramHash.put("exectime", (System.currentTimeMillis() - starttime) + "");
			obres.putAll(paramHash);
			result = obres.jsonSerialise();
			System.out.println(result);
		}
		this.resetConsole();
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * de.folt.webservices.OpenTMSWebServiceInterface#translate(java.lang.String
	 * , java.lang.String, java.lang.String, java.lang.String, int)
	 */
	@SuppressWarnings("unchecked")
	@WebMethod
	@WebResult(partName = "return")
	public String translate(@WebParam(name = "sourceSegment", partName = "sourceSegment") String sourceSegment,
			@WebParam(name = "sourceLanguage", partName = "sourceLanguage") String sourceLanguage,
			@WebParam(name = "targetLanguage", partName = "targetLanguage") String targetLanguage,
			@WebParam(name = "datasource", partName = "datasource") String datasource,
			@WebParam(name = "matchSimilarity", partName = "matchSimilarity") int matchSimilarity,
			@WebParam(name = "type", partName = "type") String type)
	{
		OpenTMSWebServiceResult obresult = new OpenTMSWebServiceResult();
		obresult.setParameters("sourceSegment", sourceSegment, "sourceLanguage", sourceLanguage, "targetLanguage",
				targetLanguage, "datasource", datasource, "similarity", matchSimilarity + "", "type", type);
		obresult.setMethod("translate");

		DataSource dataSourceInstance = null;
		try
		{
			dataSourceInstance = de.folt.models.datamodel.DataSourceInstance.createInstance(datasource);
			if (dataSourceInstance == null)
				throw new OpenTMSException();
		}
		catch (OpenTMSException e)
		{
			e.printStackTrace();
			obresult.setException(e);
			obresult.setError(de.folt.constants.OpenTMSConstants.OpenTMS_ID_FAILURE, "Datasource \"" + datasource
					+ "\" could not be opened.");
			return obresult.jsonSerialise();
		}

		String translation = "";
		// System.out.println(sourceSegment);
		try
		{
			de.folt.models.documentmodel.xliff.XliffDocument xliffDocument = new de.folt.models.documentmodel.xliff.XliffDocument();
			String fileString = "<file></file>";
			Element file = xliffDocument.buildElement(fileString);
			String transUnitString = "";
			if (type.equals("SIMPLESTRING"))
				transUnitString = "<trans-unit approved=\"no\" help-id=\"0\" id=\"0\" reformat=\"yes\" translate=\"yes\" xml:space=\"preserve\"><source xml:lang=\""
						+ sourceLanguage + "\">" + sourceSegment + "</source><target /></trans-unit>";
			else
				transUnitString = sourceSegment;

			Element transUnit = xliffDocument.buildElement(transUnitString);
			Element resultTranslate = dataSourceInstance.translate(transUnit, file, xliffDocument, sourceLanguage,
					targetLanguage, matchSimilarity, null);
			translation = xliffDocument.elementToString(resultTranslate);
			obresult.put("transunit", translation);
		}
		catch (OpenTMSException e)
		{
			e.printStackTrace();
			obresult.setException(e);
			obresult.setError(de.folt.constants.OpenTMSConstants.OpenTMS_ID_FAILURE, "Datasource \"" + datasource
					+ "\" could not be opened.");
			return obresult.jsonSerialise();
		}
		return obresult.jsonSerialise();
	}

}
