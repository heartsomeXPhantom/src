package de.folt.rpc.messages;

import java.util.Hashtable;
import java.util.Vector;

import de.folt.rpc.services.RPCMessage;
import de.folt.util.OpenTMSProperties;

/**
 * @author Klemens Waldhör
 * 
 */
public class RepetitionAnalysis implements RPCMessage
{
    /** 
     * RepetitionAnalysis runs a repetition analysis on a xliff file. Parameters are provided through a hash table. The hashtable contains the following keys:<p>
     * xliffDocument - the xliff document to be analysed<br>
     * It returns:<p>
     * retVec = com.araya.OpenTMS.Interface.RepetitionAnalysis(message); - the result generated by this interface method<br>
     * or<p>
     *  vec.add(de.folt.constants.OpenTMSConstants.OpenTMS_ID_FAILURE +"");<br>
     *  vec.add(ex.getMessage());<br>
     * @see de.folt.rpc.services.RPCMessage#execute(java.util.Hashtable)
     * @see com.araya.OpenTMS.Interface.RepetitionAnalysis(java.util.Vector)
     */
    @SuppressWarnings("unchecked")
    public Vector execute(Hashtable message)
    {
        Vector vec = new Vector();
        try
        {          
            String outputFileName = de.folt.util.OpenTMSSupportFunctions.fillParam(message, "xliffDocument");
            System.out.println("xliffDocument=     \"" + outputFileName + "\"");

            String propFile = OpenTMSProperties.getInstance().getOpenTMSProperty("ArayaPropertiesFile");
            message.put("ArayaPropertiesFile", propFile);
            System.out.println("ArayaPropertiesFile=\"" + propFile + "\"");
            Vector retVec = com.araya.OpenTMS.Interface.RepetitionAnalysis(message);
            System.out.println("RepetitionAnalysis " + " finished!");
            vec = retVec;
            return vec;
        }
        catch (Exception ex)
        {
            vec.add(de.folt.constants.OpenTMSConstants.OpenTMS_ID_FAILURE +"");
            vec.add(ex.getMessage());
            ex.printStackTrace();
            return vec;
        }
    }
}